import asyncio
from aiogram import Dispatcher, types

from src.kbds.inline_kb import change_operation, main_menu
from src.utils import check_worker_status, works_done_today


async def status_window(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞."""
    user_id = callback_query.from_user.id
    message_old = ""

    while True:
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
        status = await check_worker_status(user_id)
        works_done = await works_done_today(user_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        final_output = (
            "<b>üîç Your Current Status:</b>\n"
            f"<b><i>{status}</i></b>\n\n"
            "<b>üìã Operations Completed Today:</b>\n"
            f"<b>{works_done}</b>"
        )

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ç–µ–∫—Å—Ç–µ
        if message_old == final_output:
            await asyncio.sleep(10)
            continue
        print(final_output)

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            keyboard = await main_menu()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback_query.message.answer(
                text=final_output, reply_markup=keyboard, parse_mode="HTML"
            )
            message_old = final_output
        except Exception as e:
            print(f"Error during status window: {e}")
            break
        await asyncio.sleep(10)




async def handle_change_operation(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–∏."""
    keyboard = await change_operation()
    await callback_query.message.edit_reply_markup(reply_markup=keyboard)

async def handle_go_back(callback_query: types.CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –æ–∫–Ω—É —Å—Ç–∞—Ç—É—Å–∞."""
    await status_window(callback_query)


def register_status(dp: Dispatcher):
    dp.callback_query.register(status_window, lambda c: c.data == "start_work")
    dp.callback_query.register(handle_change_operation, lambda c: c.data == "change_operation")
    dp.callback_query.register(lambda c: c.data == "go_back")